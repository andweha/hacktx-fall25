import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'firebase_options.dart'; // generated by FlutterFire
import 'main_navigation.dart';
import 'pages/sign_in_page.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(const MyApp());
}

/// Bootstrap required Firestore docs after sign-in to prevent permission errors
Future<void> bootstrapUserDocs(String uid) async {
  final db = FirebaseFirestore.instance;
  
  await db.runTransaction((tx) async {
    final userProf = db.doc('user_profiles/$uid');
    final boardDoc = db.doc('boards/$uid');
    final publicProf = db.doc('public_profiles/$uid');

    // Create user profile if missing
    if (!(await tx.get(userProf)).exists) {
      final uname = _genUsername();
      tx.set(userProf, {
        'displayName': uname,
        'username': uname,
        'photoURL': null,
        'createdAt': FieldValue.serverTimestamp(),
        'anon': true,
        'friendUids': [],
        'prefs': {},
      });
      
      // Create public profile
      tx.set(publicProf, {
        'displayName': uname,
        'username': uname,
        'photoURL': null,
        'updatedAt': FieldValue.serverTimestamp(),
      });
    }
    
    // Create board doc if missing
    if (!(await tx.get(boardDoc)).exists) {
      tx.set(boardDoc, {
        'createdAt': FieldValue.serverTimestamp(),
        'version': 1,
        'cells': [], // Initialize empty cells array
      });
    }
  });
}

String _genUsername() {
  const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
  final now = DateTime.now().microsecondsSinceEpoch;
  final suffix = List.generate(4, (i) => chars[(now >> (i * 5)) % chars.length])
      .join();
  return 'user-$suffix';
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Task Tracker',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: StreamBuilder<User?>(
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snap) {
          if (snap.connectionState == ConnectionState.waiting) {
            return const Scaffold(body: Center(child: CircularProgressIndicator()));
          }
          final user = snap.data;
          if (user == null) {
            return const SignInPage();
          }
          return kIsWeb ? const _WebAppWrapper() : const MainNavigation();
        },
      ),
    );
  }
}

class _WebAppWrapper extends StatelessWidget {
  const _WebAppWrapper();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[200],
      body: Center(
        child: Container(
          constraints: const BoxConstraints(
            minWidth: 375,  // Minimum mobile width
            maxWidth: 1200, // Maximum desktop width
            minHeight: 600, // Minimum height
            maxHeight: 800, // Maximum height
          ),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 20,
                offset: const Offset(0, 10),
              ),
            ],
          ),
          clipBehavior: Clip.antiAlias,
          child: const MainNavigation(),
        ),
      ),
    );
  }
}
