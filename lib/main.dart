import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:async';
import 'firebase_options.dart'; // generated by FlutterFire
import 'main_navigation.dart';
import 'pages/sign_in_page.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(const MyApp());
}

/// Bootstrap required Firestore docs after sign-in to prevent permission errors
Future<void> bootstrapUserDocs(String uid) async {
  try {
    print('Bootstrap: Starting bootstrap for uid: $uid');
    
    // Validate UID
    if (uid.isEmpty) {
      print('Bootstrap: Error - UID is empty');
      throw Exception('User ID is empty');
    }
    
    final db = FirebaseFirestore.instance;
    
    // Add timeout to prevent hanging
    await Future.any([
      db.runTransaction((tx) async {
        final userProf = db.doc('user_profiles/$uid');
        final boardDoc = db.doc('boards/$uid');
        final publicProf = db.doc('public_profiles/$uid');

        // Create user profile if missing
        final userProfExists = (await tx.get(userProf)).exists;
        print('Bootstrap: User profile exists: $userProfExists');
        
        if (!userProfExists) {
          final uname = _genUsername();
          print('Bootstrap: Creating user profile with username: $uname');
          tx.set(userProf, {
            'displayName': uname,
            'username': uname,
            'photoURL': null,
            'createdAt': FieldValue.serverTimestamp(),
            'anon': true,
            'friendUids': [],
            'prefs': {},
          });
          
          // Create public profile
          print('Bootstrap: Creating public profile');
          tx.set(publicProf, {
            'displayName': uname,
            'username': uname,
            'photoURL': null,
            'updatedAt': FieldValue.serverTimestamp(),
          });
        }
        
        // Create board doc if missing
        final boardExists = (await tx.get(boardDoc)).exists;
        print('Bootstrap: Board exists: $boardExists');
        
        if (!boardExists) {
          print('Bootstrap: Creating board document');
          tx.set(boardDoc, {
            'createdAt': FieldValue.serverTimestamp(),
            'version': 1,
            'cells': [], // Initialize empty cells array
          });
        }
      }),
      Future.delayed(const Duration(seconds: 10), () {
        throw TimeoutException('Bootstrap timed out after 10 seconds', const Duration(seconds: 10));
      }),
    ]);
    print('Bootstrap: Completed successfully for uid: $uid');
  } catch (e) {
    print('Bootstrap: Error occurred: $e');
    // Don't rethrow - let the auth state change handle the redirect
    // The user is already signed in, so the app should work even if bootstrap fails
  }
}

String _genUsername() {
  const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';
  final now = DateTime.now().microsecondsSinceEpoch;
  final suffix = List.generate(4, (i) => chars[(now >> (i * 5)) % chars.length])
      .join();
  return 'user-$suffix';
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'hacktx-fall25',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: _AuthWrapper(),
    );
  }
}

class _AuthWrapper extends StatefulWidget {
  @override
  State<_AuthWrapper> createState() => _AuthWrapperState();
}

class _AuthWrapperState extends State<_AuthWrapper> {
  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snap) {
        print('Auth state: connectionState=${snap.connectionState}, hasData=${snap.hasData}, user=${snap.data?.uid}, isAnonymous=${snap.data?.isAnonymous}');
        
        if (snap.connectionState == ConnectionState.waiting) {
          return const Scaffold(body: Center(child: CircularProgressIndicator()));
        }
        
        final user = snap.data;
        
        // If no Firebase user, show SignInPage
        if (user == null) {
          print('Auth state: No user, showing SignInPage');
          return const SignInPage();
        }
        
        // If we have a Firebase user (including anonymous), show MainNavigation
        print('Auth state: User exists (anonymous: ${user.isAnonymous}), showing MainNavigation');
        return kIsWeb ? const _WebAppWrapper() : const MainNavigation();
      },
    );
  }
}

class _WebAppWrapper extends StatelessWidget {
  const _WebAppWrapper();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[200],
      body: Center(
        child: Container(
          constraints: const BoxConstraints(
            minWidth: 375,  // Minimum mobile width
            maxWidth: 1200, // Maximum desktop width
            minHeight: 600, // Minimum height
            maxHeight: 800, // Maximum height
          ),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 20,
                offset: const Offset(0, 10),
              ),
            ],
          ),
          clipBehavior: Clip.antiAlias,
          child: const MainNavigation(),
        ),
      ),
    );
  }
}
